import sys 
N = int ( sys.argv[1] )
matrix ="\
01000000000000000001010100000000101000100000111111100001011111011100011111111000\
10100000000001111100010100000000101000100000001111100001011111011100000111111000\
01011110100001111111111100001111111111101011111111110111111111111111111111111110\
00101111101001111111111100011111111111101011111111110111111111111111111111111111\
00110111101001111111111101011111111111101011111111111111111111111111111111111111\
00111011101001111111110101011111111111101000111111111011111111111111011111111110\
00111100101001111111110100011111111111101000111111110011111111111111011111111110\
00011100100001110000011110001111111110101000101111110001010111111111011111111110\
00111111000000111101011100011111111010111110111111111111111111111111111111111111\
00000000000000000001010100000000001000100000111111110001010111011100000000111110\
00011110000101111101010101001111101010100000111111111101111111111100011111111111\
00000000001010000001010000000000001000000000111111000101010111000000000011111011\
00000000000101000001010000000000000000000000111111000100010100000000000000111011\
01111111001010111111010101001111111111101000111111111101011111111111011111111111\
01111111101001011111010101011111111111101010111111111111111111111111111111111111\
01111111101001101111010101001111111111101000111111111111111111111111011111111111\
01111110101001110101010101001111111111101000111111111111111111111111011111111111\
01111110101001111011010101001111111111101010111111111111111111111111111111111111\
00111110000001110101010100001111101010101000111111110001011111111111000111111110\
10111110111111111110110111111111111111101001111111111111111111111111111111111111\
00111110000000000001010100001110101010100000001111110001011111111100000111111110\
11111111111111111111101111111111111111111111111111111111111111111111111111111111\
00111001100000000000010100000000111100100000101111110001011111011100011111111110\
11111111111001111111111011111111111111111111111111111111111111111111111111111111\
00000001000000000001010101000000111000000000111111100000010111000000000000111000\
00001100001001111101010110100111101111101011111111110111111111111111011111111111\
00000000000000000001010101010000100000000000111111100001011100001000011111111000\
00011110100000100001010100101111111110111110111111100111111111111111111111111011\
00111111101001111111110100010111111111101010111111110101011111111111111111111111\
00111111101001111111110101011011111111111111111111111111111111111111111111111111\
00111111101001111111110101011101111111101011111111111101011111111111111111111111\
00111111101001111111010101011110111111111111111111111111111111111111111111111111\
11111111101001111111111111111111011111101011111111111111111111111111111111111111\
00111111100001111101011110011111101110101000111111110001011111111111011111111110\
11111111111101111111111111011111110111101011111111111111111111111111111111111111\
00111111000001111101011101011111111010101000111111111101111111111111011111111111\
00111111101001111111110101011111111101101011111111111111111111111111111111111111\
00111110000001111101010101001111101010100000111111111101111111111100011111111111\
11111111111001111111111101011111111111001011111111111111111111111111111111111111\
00000000100000000000010100010101000000001010001111001111111101000111110011111011\
00111111100001111111010101011111111110110111111111111111111111111111111111111111\
00000000100000000000010100010101000000001010001111001111111101000111110111111011\
00111000100000100100010101011111101010111101101111111111111111111111110111111111\
00111000000000000001010101000111101010101010111111111111111111111111110111111111\
10111111111111111111011111111111111111101011011111111111111111111111111111111111\
10111110111111111111010111111111111111101001101111111111111111111111111111111111\
11111111111111111111111111111111111111111111110111111111111111111111111111111111\
11111111111111111111111111111111111111111111111011111111111111111111111111111111\
11111111111111111111111111111111111111111111111101111111111111111111111111111111\
11111111111111111111111111111111111111111111111110111111111111111111111111111111\
11111111111001111111111111111111111111101011111111011111111111111111111111111111\
00111111111001111111111101001111111111101011111111101111111111111111111111111111\
00001100101001111101010100000111101111111111111111110111111111111111111111111111\
00111000101111111101010101011111101111111111111111111011111111111111111111111111\
00111110100000111101010101010101101010111111111111111101111111111111110111111111\
11111111111101111111111101111111111111111111111111111110111111111111111111111111\
00111110101000111101010101010101101111111111111111111111011111111111111111111111\
11111111111111111111111111111111111111111111111111111111101111111111111111111111\
11111110101001111111111101111111111111111111111111111111110111111111111111111111\
11111111111111111111111111111111111111111111111111111111111011111111111111111111\
11111111111101111111111111011111111111101011111111111111111101111111111111111111\
11111111111101111111111111011111111111111111111111111111111110111111111111111111\
00111111101001111111110101011111111111101011111111111111111111011111111111111111\
11111111111001111111111101011111111111101011111111111111111111101111111111111111\
11111111111001111111111101111111111111101011111111111111111111110111111111111111\
11111111111001111111111101011111111111111111111111111111111111111011111111111111\
00111111100001111111010101011111111110111111111111111111111111111101111111111111\
00111111100001111111010101011111111110111111111111111111111111111110111111111111\
00111000100000100101010100011111101010111111111111111111111111111111000111111111\
10111111101001111101011101111111111111111111111111111111111111111111001111111111\
10111111101001111101011101111111111111101000111111111101111111111111010111111111\
11111111101001111111111101111111111111101111111111111111111111111111111011111111\
11111111101101111111111101111111111111111111111111111111111111111111111101111111\
11111111101101111111111101111111111111111111111111111111111111111111111110111111\
11111111111111111111111111111111111111111111111111111111111111111111111111011111\
11111111111111111111111111111111111111111111111111111111111111111111111111101111\
11111111111111111111111111111111111111111111111111111111111111111111111111110111\
00111111111001111111111101001111111111101011111111111111111111111111111111111011\
00111111111111111111111101011111111111111111111111111111111111111111111111111101\
00011000101111111101010101011111101111111111111111111111111111111111111111111110\
"

M = [ [0 for x in range(80) ] for x in range(80) ]

for i in range(6400):
    M[ i / 80 ][ i % 80 ] = eval ( matrix[i] )

#L = [ 12,24,9,26,0,39,41,22,20,18,43,10,37 ]
#for i in range(13):
#    for j in range( i + 1, 13):
#        print ( M[L[i]][L[j]] )

model = []
# declare the matrix
s = 'Matrix: ARRAY BITVECTOR(14) OF BITVECTOR(1);'
model.append( s )

def toBin( x, m ):  
    return '0bin' + bin(x)[2:].zfill(m)

# assert the value of the matrix
for i in range(80):
    for j in range(80):
        s = 'ASSERT Matrix[{}@{}] = {};'.format( toBin(i, 7), toBin(j, 7), toBin( M[i][j], 1 ) )  
        model.append( s )

# declare N index
for i in range(N):
    s = 'X{}:BITVECTOR(7);'.format(i) 
    model.append( s )

# they are not equal and < 80
for i in range(N):
    s = 'ASSERT BVLT( X{}, {} );'.format( i, toBin(80, 7) ) 
    model.append( s )

for i in range(N):
    for j in range(i + 1, N):
        s = 'ASSERT X{} /= X{};'.format( i, j )
        model.append( s )

# zero matrix
for i in range(N):
    for j in range(i + 1, N):
        s = 'ASSERT Matrix[X{}@X{}] = 0bin0;'.format( i, j)
        model.append( s )

s = 'QUERY FALSE;'
model.append( s )
s = 'COUNTEREXAMPLE;'
model.append( s )

print '\n'.join( model )













